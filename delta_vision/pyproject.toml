[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "deltavision"
dynamic = ["version"]
description = "A professional Textual-based Python application."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["textual", "tui", "python"]
authors = [
  { name = "Matt" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "textual >=5.3,<6",
  "watchdog>=3",
  # Network transport for server/client mode (installed by default so users don't need extras)
  "websockets>=12"
]

# No optional extras required for core features; networking is included by default

[tool.hatch.version]
path = "src/delta_vision/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/delta_vision"]
include = [
  # Include Textual CSS assets so they are available at runtime after install
  "src/delta_vision/**/*.tcss",
]

[project.scripts]
deltavision = "delta_vision.entry_points:main"

# Ruff linter configuration
[tool.ruff]
target-version = "py38"
line-length = 120
exclude = [
  ".venv",
  "build",
  "dist",
  "__pycache__",
]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "W",   # pycodestyle warnings
  "I",   # isort (import order)
  "UP",  # pyupgrade (modernize syntax)
  "B",   # flake8-bugbear
]
ignore = []
fixable = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["delta_vision"]
combine-as-imports = true

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"
line-ending = "auto"
