name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build_sdist_wheel:
    name: Build sdist and wheel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tooling
        run: |
          python -m pip install -U pip build

      - name: Build package
        run: |
          python -m build -s -w delta_vision

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: |
            delta_vision/dist/*.whl
            delta_vision/dist/*.tar.gz

  build_binaries:
    name: Build standalone binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install pyinstaller ./delta_vision

      - name: Build binary with PyInstaller
        shell: bash
        run: |
          pyinstaller -y delta_vision/packaging/deltavision.spec
          ls -la dist || true

      - name: Package binary artifact
        shell: bash
        run: |
          set -euo pipefail
          NAME=deltavision
          TAG="${GITHUB_REF_NAME}"
          OSNAME="${{ runner.os }}"
          mkdir -p release
          ZIP_PATH="release/${NAME}-${TAG}-${OSNAME}.zip"
          if [[ "${OSNAME}" == "Windows" ]]; then
            (cd dist && 7z a -tzip "../${ZIP_PATH}" "${NAME}")
          else
            (cd dist && zip -r "../${ZIP_PATH}" "${NAME}")
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: release/*.zip

  publish_release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build_sdist_wheel, build_binaries]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            release/**/*.whl
            release/**/*.tar.gz
            release/**/*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
