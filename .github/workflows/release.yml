name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.3)'
        required: true

jobs:
  github-release:
    name: Create GitHub Release and upload artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref_name }}

      - name: Derive version from tag
        id: vars
        run: |
          TAG_NAME="${{ inputs.tag || github.ref_name }}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          VERSION="${TAG_NAME#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Release tag: $TAG_NAME"
          echo "Release version: $VERSION"

      - name: List artifacts present in repo
        run: |
          ls -l release || true
          ls -l delta_vision/dist || true

      - name: Create GitHub Release and upload files
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Delta Vision ${{ env.TAG_NAME }}
          body_path: release/RELEASE-NOTES-${{ env.TAG_NAME }}.md
          draft: false
          prerelease: false
          files: |
            release/deltavision-${{ env.VERSION }}-linux-app.tar.gz
            release/deltavision-${{ env.VERSION }}-Linux.tar.gz
            release/deltavision-${{ env.VERSION }}-source.tar.gz
            delta_vision/dist/deltavision-${{ env.VERSION }}-py3-none-any.whl
            delta_vision/dist/deltavision-${{ env.VERSION }}.tar.gz
name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build_sdist_wheel:
    name: Build sdist and wheel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tooling
        run: |
          python -m pip install -U pip build

      - name: Build package
        run: |
          python -m build -s -w delta_vision

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: |
            delta_vision/dist/*.whl
            delta_vision/dist/*.tar.gz

  build_binaries:
    name: Build standalone binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install pyinstaller ./delta_vision

      - name: Build binary with PyInstaller
        shell: bash
        run: |
          pyinstaller -y delta_vision/packaging/deltavision.spec
          ls -la dist || true

      - name: Package binary artifact
        shell: bash
        run: |
          set -euo pipefail
          NAME=deltavision
          TAG="${GITHUB_REF_NAME}"
          OSNAME="${{ runner.os }}"
          mkdir -p release
            # Add a quick-start README inside the bundle (ASCII only, short lines)
            {
              echo 'Delta Vision - standalone bundle'
              echo
              echo 'Usage:'
              echo '  Linux/macOS:'
              echo '    ./deltavision --new /path/to/New --old /path/to/Old \'
              echo '      --keywords /path/to/keywords.md'
              echo '  Windows:'
              echo '    deltavision.exe --new C:\\path\\to\\New --old C:\\path\\to\\Old ^'
              echo '      --keywords C:\\path\\to\\keywords.md'
              echo
              echo 'Notes:'
              echo '  - No additional dependencies required.'
              echo '  - Server: ./deltavision --server --port 8765 ...'
              echo '  - Client: ./deltavision --client --host 1.2.3.4 --port 8765'
            } > "dist/${NAME}/README-RUN.txt"

          if [[ "${OSNAME}" == "Windows" ]]; then
            ARCHIVE_PATH="release/${NAME}-${TAG}-${OSNAME}.zip"
            (cd dist && 7z a -tzip "../${ARCHIVE_PATH}" "${NAME}")
          else
            ARCHIVE_PATH="release/${NAME}-${TAG}-${OSNAME}.tar.gz"
            (cd dist && tar -czf "../${ARCHIVE_PATH}" "${NAME}")
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: |
            release/*.zip
            release/*.tar.gz

  publish_release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build_sdist_wheel, build_binaries]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            release/**/*.whl
            release/**/*.tar.gz
            release/**/*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
